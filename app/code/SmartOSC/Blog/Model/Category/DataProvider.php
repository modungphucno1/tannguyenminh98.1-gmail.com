<?phpnamespace SmartOSC\Blog\Model\Category;use Magento\Framework\App\Request\DataPersistorInterface;use Magento\Ui\DataProvider\Modifier\PoolInterface;use SmartOSC\Blog\Model\Category;use SmartOSC\Blog\Model\ResourceModel\Category\Collection;use SmartOSC\Blog\Model\ResourceModel\Category\CollectionFactory;class DataProvider extends \Magento\Ui\DataProvider\ModifierPoolDataProvider{    /**     * @var Collection     */    protected $collection;    /**                 * @var DataPersistorInterface                 */    protected $dataPersistor;    /**                 * @var array                 */    protected $loadedData;    /**                 * Constructor                 *                 * @param string $name                 * @param string $primaryFieldName                 * @param string $requestFieldName                 * @param CollectionFactory $categoryCollectionFactory                 * @param DataPersistorInterface $dataPersistor                 * @param array $meta                 * @param array $data                 * @param PoolInterface|null $pool                 */    public function __construct(        $name,        $primaryFieldName,        $requestFieldName,        CollectionFactory $categoryCollectionFactory,        DataPersistorInterface $dataPersistor,        array $meta = [],        array $data = [],        PoolInterface $pool = null    )    {        $this->collection = $categoryCollectionFactory->create();        $this->dataPersistor = $dataPersistor;        parent::__construct($name, $primaryFieldName, $requestFieldName, $meta, $data, $pool);    }    /**                 * Get data                 *                 * @return array                 */    public function getData()    {        if (isset($this->loadedData)) {            return $this->loadedData;        }        $items = $this->collection->getItems();        /** @var Category $block */        foreach ($items as $block) {            $this->loadedData[$block->getId()] = $block->getData();        }        $data = $this->dataPersistor->get('smart_blog_category');        if (!empty($data)) {            $block = $this->collection->getNewEmptyItem();            $block->setData($data);            $this->loadedData[$block->getId()] = $block->getData();            $this->dataPersistor->clear('smart_blog_category');        }        return $this->loadedData;    }}